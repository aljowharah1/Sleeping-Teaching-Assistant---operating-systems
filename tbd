void* ta_teaching() {
    while (1) {
        // Check if there are no students waiting and sleep if true
        pthread_mutex_lock(&mutex);
        if (count == 0) {
            pthread_mutex_unlock(&mutex);
            // TA sleeps when no students are waiting
            printf("        [ta] TA is sleeping, no students waiting...\n");
            sem_wait(&sem_stu);  // Wait until a student arrives
        } else {
            pthread_mutex_unlock(&mutex);  // Unlock mutex because there are students

            // TA teaches a student
            sem_wait(&sem_stu);  // Wait for a student to arrive
            pthread_mutex_lock(&mutex);

            // Now the TA teaches the student
            printf("        [ta] TA is teaching student %d\n", chair[next_teach]);
            chair[next_teach] = 0;  // The student has been taught
            count--;  // Decrease the number of waiting students

            // Print the current state of waiting students
            printf("waiting students : [1] %d [2] %d [3] %d\n", chair[0], chair[1], chair[2]);
            next_teach = (next_teach + 1) % NUM_SEAT;  // Update the index of the next student to be taught

            pthread_mutex_unlock(&mutex);  // Unlock the mutex

            rand_sleep();  // Simulate time spent teaching

            printf("        [ta] teaching finished.\n");

            sem_post(&sem_ta);  // Signal that the TA is done teaching and ready for the next student
        }
    }
}
